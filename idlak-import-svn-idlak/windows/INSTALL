
# Installation instructions for native Windows with Visual
# studio (for cygwin installation, see the instructions 
# in ../INSTALL).

#NOTE: These instructions are valid May 2015 and are tested only for MKL
#NOTE: The build process were validated using MSVS2013 and partially MSVS2015-rc
#NOTE: We support only openfst-1.3.x for now.
#NOTE: I suggest to have git installed -- not only because we will 
#      use it to download the source codes (you could download archives
#      instead of it), but also because the windows version comes
#      with a bunch of useful utilities. 
#NOTE: The examples will assume you have installed the git for windows
#      and during the installation you chose the GIT Shell to install as well.
#      Moreover, all the commands are issued from the same session

1) Checkout Kaldi trunk, either using the svn from the url
   https://svn.code.sf.net/p/kaldi/code/trunk
   or using git from 
   https://github.com/kaldi-asr/kaldi.git
   Example:
     $ git clone https://github.com/kaldi-asr/kaldi.git kaldi

2) enter the (kaldi)/tools directory in the freshly 
   checked-out kaldi repo. All following actions should
   be taken in the tools dir
   Example:
     $ cd (kaldi)/tools
	 (kaldi)/tools$ pwd
   
   
2a) Use git to clone the OpenFST(win) from
   https://github.com/jtrmal/openfstwin-1.3.4.git
   Example:
     (kaldi)/tools$ git clone https://github.com/jtrmal/openfstwin-1.3.4.git openfst
   
   
2b) Download pthread-win32 (or wget or curl)
   https://sourceforge.net/projects/pthreads4w/
     (kaldi)/tools$ wget http://downloads.sourceforge.net/project/pthreads4w/pthreads-w32-2-9-1-release.zip
	 (kaldi)/tools$ mkdir pthreads; cd pthreads
	 (kaldi)/tools/pthreads$ unzip ../pthreads-w32-2-9-1-release.zip

2c) Use patch (or you can use git patch) to patch the OpenFST(win)
   patch location tools/extras/openfstwin-1.3.4.patch,
   Example:
     (kaldi)/tools$ cd openfst
	 (kaldi)/tools/openfst$ patch -p1 <../extras/openfstwin-1.3.4.patch 

3)  Open the OpenFST solution in VS -- 
   for VS 2013, the correct solution is in VS2012 directory
   for VS 2014, the correct solution is in VS2014 directory
   switch the configuration to debug|x64 and build the solution
   The same for configuration release|x64
   If either of the two won't build, you should stop here and start figuring what's different!

4)  Enter the (kaldi)/windows directory
   Example:
	 (kaldi)/tools/openfst$ cd ../../windows
	 (kaldi)/windows $ pwd
	 
4a) modify the file variables.props to reflect 
    the correct paths, using your favorite text editor.
	Don't worry, it's a text file, even though you have to be 
	careful to keep the structure itself intact
	(kaldi)/windows $ vim variables.props

4b) call the script that generates the MSVC solution
	i.e.
	generate_solution.pl --vsver <default|vs2013|vs2015>
	i.e. for example
	generate_solution.pl --vsver vs2013

5)  Open the generated solution in the visual studio and switch to Debug|x64 (or Release|x64) and build
   Expect ~8 projects to fail, majority of them will fail because of missing include "portaudio.h"

------  	
NOTE: I'm leaving the information about ATLAS here, for reference (also do not forget to consult the README.ATLAS)
(B) either
   (i) compile ATLAS under cygwin [see INSTALL.atlas] and copy
  kaldiwin_atlas.props  to kaldiwin.props

(D)
If you had installed ATLAS, you next have to do this:
[assuming you are one level above this directory]
cd kaldiwin_vs10_auto/

# type the following (these commands were done from cygwin): note that these
# commands are a bit wasteful of disk; you could alternatively ensure that
# [root]/tools/ATLAS/cygwin_build/install/lib/ is always on your path when you
# run the binaries.

mkdir -p Debug Release
cp ../tools/ATLAS/cygwin_build/install/lib/lib_atlas.dll Debug
cp ../tools/ATLAS/cygwin_build/install/lib/lib_atlas.dll Release

Then build the project with Visual Studio.
